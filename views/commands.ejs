<%- include('partials/header') %>
<%- include('partials/navbar') %>

<div class="container-fluid">
    <div class="row">
        <% locals.activePage = 'dashboard'; %>
        <% locals.activeSection = 'commands'; %>
        <%- include('partials/sidebar', { guild: guild }) %>

        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 py-4">
            <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                <h1 class="h2">Commands Configuration</h1>
                <div class="btn-toolbar mb-2 mb-md-0">
                    <button type="button" class="btn btn-sm btn-outline-primary me-2" id="refreshCommands">
                        <i class="fas fa-sync-alt"></i> Refresh
                    </button>
                </div>
            </div>

            <div class="row">
                <div class="col-12">
                    <div class="alert alert-info" role="alert">
                        <h4 class="alert-heading"><i class="fas fa-info-circle me-2"></i>Commands Information</h4>
                        <p>Here you can enable, disable, and configure commands for your server. Changed settings will apply immediately to the bot.</p>
                        <hr>
                        <p class="mb-0">Use the tabs below to navigate between different command categories.</p>
                    </div>
                </div>
            </div>

            <!-- Command Categories Tabs -->
            <ul class="nav nav-tabs mb-4" id="commandsTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="all-tab" data-bs-toggle="tab" data-bs-target="#all" 
                            type="button" role="tab" aria-controls="all" aria-selected="true">
                        All Commands
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="moderation-tab" data-bs-toggle="tab" data-bs-target="#moderation" 
                            type="button" role="tab" aria-controls="moderation" aria-selected="false">
                        Moderation
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="utility-tab" data-bs-toggle="tab" data-bs-target="#utility" 
                            type="button" role="tab" aria-controls="utility" aria-selected="false">
                        Utility
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="fun-tab" data-bs-toggle="tab" data-bs-target="#fun" 
                            type="button" role="tab" aria-controls="fun" aria-selected="false">
                        Fun
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="custom-tab" data-bs-toggle="tab" data-bs-target="#custom" 
                            type="button" role="tab" aria-controls="custom" aria-selected="false">
                        Custom Commands
                    </button>
                </li>
            </ul>

            <!-- Commands Content -->
            <div class="tab-content" id="commandsTabContent">
                <!-- All Commands Tab -->
                <div class="tab-pane fade show active" id="all" role="tabpanel" aria-labelledby="all-tab">
                    <div class="mb-3">
                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-search"></i></span>
                            <input type="text" class="form-control" id="searchCommands" placeholder="Search commands...">
                        </div>
                    </div>

                    <div class="table-responsive">
                        <table class="table table-hover" id="commandsTable">
                            <thead>
                                <tr>
                                    <th>Command</th>
                                    <th>Description</th>
                                    <th>Category</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- This will be populated with commands -->
                                <tr>
                                    <td colspan="5" class="text-center py-4">
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                        <p class="mt-2">Loading commands...</p>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Moderation Commands Tab -->
                <div class="tab-pane fade" id="moderation" role="tabpanel" aria-labelledby="moderation-tab">
                    <div class="card">
                        <div class="card-header">
                            <i class="fas fa-shield-alt me-1"></i> Moderation Commands
                        </div>
                        <div class="card-body">
                            <!-- List of moderation commands -->
                            <div id="moderationCommands">
                                Loading...
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Utility Commands Tab -->
                <div class="tab-pane fade" id="utility" role="tabpanel" aria-labelledby="utility-tab">
                    <div class="card">
                        <div class="card-header">
                            <i class="fas fa-tools me-1"></i> Utility Commands
                        </div>
                        <div class="card-body">
                            <!-- List of utility commands -->
                            <div id="utilityCommands">
                                Loading...
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Fun Commands Tab -->
                <div class="tab-pane fade" id="fun" role="tabpanel" aria-labelledby="fun-tab">
                    <div class="card">
                        <div class="card-header">
                            <i class="fas fa-gamepad me-1"></i> Fun Commands
                        </div>
                        <div class="card-body">
                            <!-- List of fun commands -->
                            <div id="funCommands">
                                Loading...
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Custom Commands Tab -->
                <div class="tab-pane fade" id="custom" role="tabpanel" aria-labelledby="custom-tab">
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <span><i class="fas fa-code me-1"></i> Custom Commands</span>
                            <button class="btn btn-sm btn-primary" id="createCustomCommand">
                                <i class="fas fa-plus"></i> Create Command
                            </button>
                        </div>
                        <div class="card-body">
                            <!-- List of custom commands -->
                            <div id="customCommands">
                                <p class="text-center">You haven't created any custom commands yet.</p>
                                <div class="text-center">
                                    <button class="btn btn-primary" id="createFirstCustomCommand">
                                        <i class="fas fa-plus me-1"></i> Create Your First Command
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>
</div>

<!-- Custom Command Modal -->
<div class="modal fade" id="customCommandModal" tabindex="-1" aria-labelledby="customCommandModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="customCommandModalLabel">Create Custom Command</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="customCommandForm">
                    <div class="mb-3">
                        <label for="commandName" class="form-label">Command Name</label>
                        <input type="text" class="form-control" id="commandName" required>
                        <div class="form-text">No spaces or special characters (except dashes and underscores)</div>
                    </div>
                    <div class="mb-3">
                        <label for="commandResponse" class="form-label">Response</label>
                        <textarea class="form-control" id="commandResponse" rows="3" required></textarea>
                        <div class="form-text">
                            You can use variables like {user} for the username and {server} for the server name
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveCustomCommand">Save Command</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Fetch commands
        fetchCommands();
        
        // Set up event listeners
        document.getElementById('refreshCommands').addEventListener('click', function() {
            fetchCommands();
        });
        
        document.getElementById('searchCommands').addEventListener('input', function() {
            filterCommands(this.value);
        });
        
        document.getElementById('createCustomCommand').addEventListener('click', function() {
            // Show the modal
            new bootstrap.Modal(document.getElementById('customCommandModal')).show();
        });
        
        document.getElementById('createFirstCustomCommand').addEventListener('click', function() {
            // Show the modal
            new bootstrap.Modal(document.getElementById('customCommandModal')).show();
        });
        
        document.getElementById('saveCustomCommand').addEventListener('click', function() {
            // Validate and save the custom command
            const name = document.getElementById('commandName').value.trim();
            const response = document.getElementById('commandResponse').value.trim();
            
            if (!name) {
                alert('Please enter a command name');
                return;
            }
            
            if (!response) {
                alert('Please enter a command response');
                return;
            }
            
            // Validate command name format (no spaces, etc.)
            if (!/^[a-z0-9_-]+$/i.test(name)) {
                alert('Command name can only contain letters, numbers, underscores, and dashes');
                return;
            }
            
            // Save the command (this is just a placeholder, you'd call your API here)
            alert(`Custom command "${name}" created successfully!`);
            
            // Close the modal
            bootstrap.Modal.getInstance(document.getElementById('customCommandModal')).hide();
        });
    });
    
    // Function to fetch commands from API
    function fetchCommands() {
        const tableBody = document.querySelector('#commandsTable tbody');
        
        // Show loading state
        tableBody.innerHTML = `
            <tr>
                <td colspan="5" class="text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading commands...</p>
                </td>
            </tr>
        `;
        
        // Fetch commands from API
        fetch('/api/guilds/<%= guild.id %>/commands')
            .then(response => response.json())
            .then(data => {
                if (data.success && data.commands) {
                    updateCommandsTable(data.commands);
                    updateCommandTabs(data.commands);
                } else {
                    // Show error
                    tableBody.innerHTML = `
                        <tr>
                            <td colspan="5" class="text-center py-4">
                                <div class="alert alert-danger mb-0">
                                    Failed to load commands. ${data.error || 'Please try again.'}
                                </div>
                            </td>
                        </tr>
                    `;
                }
            })
            .catch(error => {
                console.error('Error fetching commands:', error);
                // Show error
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="5" class="text-center py-4">
                            <div class="alert alert-danger mb-0">
                                An error occurred while loading commands. Please try again later.
                            </div>
                        </td>
                    </tr>
                `;
            });
    }
    
    // Function to update the commands table
    function updateCommandsTable(commands) {
        const tableBody = document.querySelector('#commandsTable tbody');
        
        if (commands.length === 0) {
            tableBody.innerHTML = `
                <tr>
                    <td colspan="5" class="text-center py-4">
                        No commands found.
                    </td>
                </tr>
            `;
            return;
        }
        
        // Clear the table
        tableBody.innerHTML = '';
        
        // Add commands to the table
        commands.forEach(command => {
            const row = document.createElement('tr');
            row.dataset.command = command.name;
            row.dataset.category = command.category || 'Other';
            
            row.innerHTML = `
                <td>
                    <strong>${command.name}</strong>
                    ${command.aliases ? `<br><small class="text-muted">Aliases: ${command.aliases.join(', ')}</small>` : ''}
                </td>
                <td>${command.description || 'No description'}</td>
                <td><span class="badge bg-secondary">${command.category || 'Other'}</span></td>
                <td>
                    <div class="form-check form-switch">
                        <input class="form-check-input command-toggle" type="checkbox" id="command-${command.name}" 
                               data-command="${command.name}" ${command.enabled !== false ? 'checked' : ''}>
                    </div>
                </td>
                <td>
                    <button class="btn btn-sm btn-outline-info command-info" data-command="${command.name}">
                        <i class="fas fa-info-circle"></i>
                    </button>
                </td>
            `;
            
            tableBody.appendChild(row);
        });
        
        // Add event listeners to command toggles
        document.querySelectorAll('.command-toggle').forEach(toggle => {
            toggle.addEventListener('change', function() {
                const commandName = this.dataset.command;
                const enabled = this.checked;
                
                // Call API to update command status
                console.log(`Setting command ${commandName} to ${enabled ? 'enabled' : 'disabled'}`);
                
                // This is a placeholder - you'd update via API in reality
                // For now, just show an alert
                alert(`Command "${commandName}" ${enabled ? 'enabled' : 'disabled'} successfully!`);
            });
        });
        
        // Add event listeners to info buttons
        document.querySelectorAll('.command-info').forEach(button => {
            button.addEventListener('click', function() {
                const commandName = this.dataset.command;
                const command = commands.find(cmd => cmd.name === commandName);
                
                if (command) {
                    // Show command info (this is just a placeholder)
                    alert(`Command: ${command.name}\nDescription: ${command.description || 'No description'}\nCategory: ${command.category || 'Other'}\nUsage: ${command.usage || command.name}`);
                }
            });
        });
    }
    
    // Function to update the command category tabs
    function updateCommandTabs(commands) {
        // Group commands by category
        const categories = ['moderation', 'utility', 'fun'];
        const commandsByCategory = {};
        
        categories.forEach(category => {
            commandsByCategory[category] = commands.filter(cmd => 
                cmd.category && cmd.category.toLowerCase() === category
            );
        });
        
        // Update each category tab
        categories.forEach(category => {
            const container = document.getElementById(`${category}Commands`);
            const categoryCommands = commandsByCategory[category];
            
            if (categoryCommands.length === 0) {
                container.innerHTML = `<p class="text-center py-3">No ${category} commands found.</p>`;
                return;
            }
            
            let html = '<div class="row row-cols-1 row-cols-md-2 g-4">';
            
            categoryCommands.forEach(command => {
                html += `
                    <div class="col">
                        <div class="card h-100">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <span>${command.name}</span>
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" 
                                           id="tab-command-${command.name}" 
                                           data-command="${command.name}" 
                                           ${command.enabled !== false ? 'checked' : ''}>
                                </div>
                            </div>
                            <div class="card-body">
                                <p class="card-text">${command.description || 'No description'}</p>
                                ${command.usage ? `<p class="card-text"><small class="text-muted">Usage: ${command.usage}</small></p>` : ''}
                            </div>
                        </div>
                    </div>
                `;
            });
            
            html += '</div>';
            container.innerHTML = html;
        });
    }
    
    // Function to filter commands in the table
    function filterCommands(searchTerm) {
        searchTerm = searchTerm.toLowerCase();
        const rows = document.querySelectorAll('#commandsTable tbody tr');
        
        rows.forEach(row => {
            const commandName = row.dataset.command?.toLowerCase() || '';
            const commandCategory = row.dataset.category?.toLowerCase() || '';
            const commandDescription = row.querySelector('td:nth-child(2)')?.textContent.toLowerCase() || '';
            
            if (commandName.includes(searchTerm) || 
                commandCategory.includes(searchTerm) || 
                commandDescription.includes(searchTerm)) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    }
</script>

<%- include('partials/footer') %>