<%- include('../../dashboard/views/partials/header') %>
<%- include('../../dashboard/views/partials/navbar') %>

<div class="container-fluid">
    <div class="row">
        <%- include('../../dashboard/views/partials/sidebar', { guild: guild }) %>

        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 py-4">
            <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                <h1 class="h2">Server Analytics</h1>
                <div class="btn-toolbar mb-2 mb-md-0">
                    <div class="btn-group me-2">
                        <button type="button" class="btn btn-sm btn-outline-secondary time-range-btn <%= settings.timeRange === '7d' ? 'active' : '' %>" data-range="7d">7 Days</button>
                        <button type="button" class="btn btn-sm btn-outline-secondary time-range-btn <%= settings.timeRange === '30d' ? 'active' : '' %>" data-range="30d">30 Days</button>
                        <button type="button" class="btn btn-sm btn-outline-secondary time-range-btn <%= settings.timeRange === '90d' ? 'active' : '' %>" data-range="90d">90 Days</button>
                    </div>
                    <button type="button" class="btn btn-sm btn-outline-secondary" id="refreshData">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                </div>
            </div>

            <!-- Overview Stats -->
            <div class="row mt-3 mb-4" id="statsOverview">
                <div class="col-md-3">
                    <div class="card stat-card bg-primary text-white">
                        <div class="card-body">
                            <div class="stat-icon bg-white text-primary">
                                <i class="fas fa-users"></i>
                            </div>
                            <div class="stat-details">
                                <h3 class="stat-number" id="totalMembers">...</h3>
                                <p class="stat-label">Total Members</p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card stat-card bg-success text-white">
                        <div class="card-body">
                            <div class="stat-icon bg-white text-success">
                                <i class="fas fa-comment-alt"></i>
                            </div>
                            <div class="stat-details">
                                <h3 class="stat-number" id="totalMessages">...</h3>
                                <p class="stat-label">Messages</p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card stat-card bg-info text-white">
                        <div class="card-body">
                            <div class="stat-icon bg-white text-info">
                                <i class="fas fa-terminal"></i>
                            </div>
                            <div class="stat-details">
                                <h3 class="stat-number" id="totalCommands">...</h3>
                                <p class="stat-label">Commands Used</p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card stat-card bg-warning text-white">
                        <div class="card-body">
                            <div class="stat-icon bg-white text-warning">
                                <i class="fas fa-headset"></i>
                            </div>
                            <div class="stat-details">
                                <h3 class="stat-number" id="voiceMinutes">...</h3>
                                <p class="stat-label">Voice Minutes</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <!-- Member Growth Chart -->
                <div class="col-lg-6 mb-4">
                    <div class="card h-100">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <span><i class="fas fa-users me-1"></i> Member Growth</span>
                            <div class="btn-group">
                                <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-ellipsis-v"></i>
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    <li><a class="dropdown-item" href="#" id="downloadMembersChart"><i class="fas fa-download me-1"></i> Download Chart</a></li>
                                    <li><a class="dropdown-item" href="#" id="downloadMembersData"><i class="fas fa-file-csv me-1"></i> Download Data</a></li>
                                </ul>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="chart-container" style="position: relative; height: 300px;">
                                <canvas id="membersChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Message Activity Chart -->
                <div class="col-lg-6 mb-4">
                    <div class="card h-100">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <span><i class="fas fa-comment-alt me-1"></i> Message Activity</span>
                            <div class="btn-group">
                                <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-ellipsis-v"></i>
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    <li><a class="dropdown-item" href="#" id="downloadMessagesChart"><i class="fas fa-download me-1"></i> Download Chart</a></li>
                                    <li><a class="dropdown-item" href="#" id="downloadMessagesData"><i class="fas fa-file-csv me-1"></i> Download Data</a></li>
                                </ul>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="chart-container" style="position: relative; height: 300px;">
                                <canvas id="messagesChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <!-- Popular Commands -->
                <div class="col-lg-6 mb-4">
                    <div class="card h-100">
                        <div class="card-header">
                            <i class="fas fa-terminal me-1"></i> Popular Commands
                        </div>
                        <div class="card-body">
                            <div class="chart-container" style="position: relative; height: 300px;">
                                <canvas id="commandsChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Channel Activity -->
                <div class="col-lg-6 mb-4">
                    <div class="card h-100">
                        <div class="card-header">
                            <i class="fas fa-hashtag me-1"></i> Channel Activity
                        </div>
                        <div class="card-body">
                            <div class="chart-container" style="position: relative; height: 300px;">
                                <canvas id="channelsChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Analytics Settings -->
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <span><i class="fas fa-cogs me-1"></i> Analytics Settings</span>
                    <button class="btn btn-sm btn-primary" id="saveSettings">Save Settings</button>
                </div>
                <div class="card-body">
                    <form id="analyticsSettingsForm">
                        <div class="mb-3">
                            <label class="form-label">Enabled Charts</label>
                            <div class="row">
                                <div class="col-md-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="membersChartEnabled" name="enabledCharts" value="members" 
                                               <%= settings.enabledCharts && settings.enabledCharts.includes('members') ? 'checked' : '' %>>
                                        <label class="form-check-label" for="membersChartEnabled">
                                            Member Growth
                                        </label>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="messagesChartEnabled" name="enabledCharts" value="messages"
                                               <%= settings.enabledCharts && settings.enabledCharts.includes('messages') ? 'checked' : '' %>>
                                        <label class="form-check-label" for="messagesChartEnabled">
                                            Message Activity
                                        </label>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="commandsChartEnabled" name="enabledCharts" value="commands"
                                               <%= settings.enabledCharts && settings.enabledCharts.includes('commands') ? 'checked' : '' %>>
                                        <label class="form-check-label" for="commandsChartEnabled">
                                            Popular Commands
                                        </label>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="channelsChartEnabled" name="enabledCharts" value="channels"
                                               <%= settings.enabledCharts && settings.enabledCharts.includes('channels') ? 'checked' : '' %>>
                                        <label class="form-check-label" for="channelsChartEnabled">
                                            Channel Activity
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="timeRange" class="form-label">Default Time Range</label>
                            <select class="form-select" id="timeRange" name="timeRange">
                                <option value="7d" <%= settings.timeRange === '7d' ? 'selected' : '' %>>7 Days</option>
                                <option value="30d" <%= settings.timeRange === '30d' ? 'selected' : '' %>>30 Days</option>
                                <option value="90d" <%= settings.timeRange === '90d' ? 'selected' : '' %>>90 Days</option>
                            </select>
                        </div>
                    </form>
                </div>
            </div>
        </main>
    </div>
</div>

<!-- Add Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@2.0.0/dist/chartjs-adapter-date-fns.bundle.min.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        let membersChart, messagesChart, commandsChart, channelsChart;
        let analyticsData = null;
        
        // Fetch analytics data
        fetchData();
        
        // Setup event listeners
        document.querySelectorAll('.time-range-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const timeRange = this.dataset.range;
                
                // Update active state
                document.querySelectorAll('.time-range-btn').forEach(b => b.classList.remove('active'));
                this.classList.add('active');
                
                // Update settings
                document.getElementById('timeRange').value = timeRange;
                
                // Fetch data for new time range
                fetchData(timeRange);
            });
        });
        
        document.getElementById('refreshData').addEventListener('click', function() {
            const timeRange = document.querySelector('.time-range-btn.active').dataset.range;
            fetchData(timeRange);
        });
        
        document.getElementById('saveSettings').addEventListener('click', function() {
            saveSettings();
        });
        
        // Function to fetch analytics data
        function fetchData(timeRange = document.querySelector('.time-range-btn.active').dataset.range) {
            // Show loading state
            updateLoading(true);
            
            fetch(`/analytics/api/<%= guild.id %>/data?timeRange=${timeRange}`)
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        analyticsData = result.data;
                        
                        // Update overview stats
                        updateOverviewStats(analyticsData);
                        
                        // Update charts
                        updateCharts(analyticsData);
                        
                        // Remove loading state
                        updateLoading(false);
                    } else {
                        console.error('Error fetching analytics data:', result.error);
                        alert('Error loading analytics data. Please try again later.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while loading analytics data.');
                    updateLoading(false);
                });
        }
        
        // Function to update overview stats
        function updateOverviewStats(data) {
            const lastMembersData = data.members.total[data.members.total.length - 1].value;
            document.getElementById('totalMembers').textContent = formatNumber(lastMembersData);
            
            const totalMessages = data.messages.total.reduce((sum, day) => sum + day.value, 0);
            document.getElementById('totalMessages').textContent = formatNumber(totalMessages);
            
            const totalCommands = data.commands.used.reduce((sum, day) => sum + day.value, 0);
            document.getElementById('totalCommands').textContent = formatNumber(totalCommands);
            
            const totalVoiceMinutes = data.voice.minutes.reduce((sum, day) => sum + day.value, 0);
            document.getElementById('voiceMinutes').textContent = formatNumber(totalVoiceMinutes);
        }
        
        // Function to update all charts
        function updateCharts(data) {
            updateMembersChart(data.members);
            updateMessagesChart(data.messages);
            updateCommandsChart(data.commands);
            updateChannelsChart(data.messages.channels);
        }
        
        // Function to update members chart
        function updateMembersChart(data) {
            const ctx = document.getElementById('membersChart').getContext('2d');
            
            // Destroy existing chart if it exists
            if (membersChart) {
                membersChart.destroy();
            }
            
            // Create dates and values arrays
            const dates = data.total.map(item => item.date);
            const totalValues = data.total.map(item => item.value);
            const joinedValues = data.joined.map(item => item.value);
            const leftValues = data.left.map(item => item.value);
            
            // Create new chart
            membersChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: dates,
                    datasets: [
                        {
                            label: 'Total Members',
                            data: totalValues,
                            borderColor: 'rgb(65, 105, 225)',
                            backgroundColor: 'rgba(65, 105, 225, 0.1)',
                            borderWidth: 2,
                            tension: 0.1,
                            fill: true
                        },
                        {
                            label: 'Joined',
                            data: joinedValues,
                            borderColor: 'rgb(50, 205, 50)',
                            backgroundColor: 'rgba(50, 205, 50, 0.5)',
                            borderWidth: 1,
                            tension: 0.1,
                            type: 'bar'
                        },
                        {
                            label: 'Left',
                            data: leftValues,
                            borderColor: 'rgb(220, 53, 69)',
                            backgroundColor: 'rgba(220, 53, 69, 0.5)',
                            borderWidth: 1,
                            tension: 0.1,
                            type: 'bar'
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: false
                        }
                    }
                }
            });
        }
        
        // Function to update messages chart
        function updateMessagesChart(data) {
            const ctx = document.getElementById('messagesChart').getContext('2d');
            
            // Destroy existing chart if it exists
            if (messagesChart) {
                messagesChart.destroy();
            }
            
            // Create dates and values arrays
            const dates = data.total.map(item => item.date);
            const messageValues = data.total.map(item => item.value);
            const userValues = data.users.map(item => item.value);
            
            // Create new chart
            messagesChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: dates,
                    datasets: [
                        {
                            label: 'Messages',
                            data: messageValues,
                            borderColor: 'rgb(54, 162, 235)',
                            backgroundColor: 'rgba(54, 162, 235, 0.5)',
                            borderWidth: 2,
                            tension: 0.1
                        },
                        {
                            label: 'Active Users',
                            data: userValues,
                            borderColor: 'rgb(255, 159, 64)',
                            backgroundColor: 'rgba(255, 159, 64, 0.5)',
                            borderWidth: 2,
                            tension: 0.1
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }
        
        // Function to update commands chart
        function updateCommandsChart(data) {
            const ctx = document.getElementById('commandsChart').getContext('2d');
            
            // Destroy existing chart if it exists
            if (commandsChart) {
                commandsChart.destroy();
            }
            
            // Create labels and values arrays
            const commandNames = data.popular.map(item => item.name);
            const commandCounts = data.popular.map(item => item.count);
            
            // Create background colors (different hues)
            const backgroundColors = commandNames.map((_, index) => {
                const hue = (index * 30) % 360;
                return `hsla(${hue}, 70%, 60%, 0.7)`;
            });
            
            // Create new chart
            commandsChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: commandNames,
                    datasets: [
                        {
                            label: 'Commands Used',
                            data: commandCounts,
                            backgroundColor: backgroundColors,
                            borderColor: 'rgba(0, 0, 0, 0.1)',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    },
                    indexAxis: 'y'
                }
            });
        }
        
        // Function to update channels chart
        function updateChannelsChart(data) {
            const ctx = document.getElementById('channelsChart').getContext('2d');
            
            // Destroy existing chart if it exists
            if (channelsChart) {
                channelsChart.destroy();
            }
            
            // Create labels and values arrays
            const channelNames = data.map(item => '#' + item.name);
            const messageCounts = data.map(item => item.messages);
            
            // Create background colors (different hues)
            const backgroundColors = channelNames.map((_, index) => {
                const hue = (index * 60) % 360;
                return `hsla(${hue}, 70%, 60%, 0.7)`;
            });
            
            // Create new chart
            channelsChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: channelNames,
                    datasets: [
                        {
                            label: 'Messages',
                            data: messageCounts,
                            backgroundColor: backgroundColors,
                            borderColor: 'rgba(255, 255, 255, 0.5)',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right'
                        }
                    }
                }
            });
        }
        
        // Function to save settings
        function saveSettings() {
            const form = document.getElementById('analyticsSettingsForm');
            const formData = new FormData(form);
            
            // Get selected charts
            const enabledCharts = formData.getAll('enabledCharts');
            
            // Get time range
            const timeRange = formData.get('timeRange');
            
            // Prepare settings object
            const settings = {
                enabledCharts,
                timeRange
            };
            
            // Save settings via API
            fetch(`/api/plugins/analytics/settings/<%= guild.id %>`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ settings })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Settings saved successfully!');
                } else {
                    alert('Error saving settings: ' + data.error);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while saving settings.');
            });
        }
        
        // Function to update loading state
        function updateLoading(isLoading) {
            const statsElements = document.querySelectorAll('#statsOverview .stat-number');
            
            if (isLoading) {
                statsElements.forEach(el => {
                    el.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>';
                });
            }
        }
        
        // Helper function to format numbers
        function formatNumber(number) {
            return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        }
    });
</script>

<%- include('../../dashboard/views/partials/footer') %>